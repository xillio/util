/**
 * Project: Util Library
 * Author: Titus Nachbauer
 * Date: 2016-11-21
 *
 * ExcelUtil.xill is a library of reusable functions related to Excel and mapping.
 * It is recommended to include it in your project's Transformation robot.
 */
use Excel, Collection, Assert, MySQL, System, String;

//Returns an OBJECT containing a mapping for every sheet in the Excel workbook stored at path
function getMappingsFromExcel(path) {
    var workbook = Excel.loadWorkbook(path);
    var mappings = {};
    
    foreach(sheetName in Excel.getSheetNames(workbook)) {
        mappings[sheetName] = getMappingFromSheet(workbook, sheetName);
    }
    return mappings;
}

//Returns a mapped value using a mapping OBJECT generated by getMappingsFromExcel()
function getMappedValue(sourceValue, mappings, mappingName, defaultValue) {
    var result = null;
    if (mappings[mappingName] != null) {
        result = mappings[mappingName][sourceValue];
    }
    if (result == null) {
        result = defaultValue;
    }
    return result;
}

//Returns an OBJECT containing a source target mapping, assuming the A column of sheetName contains source values
private function getMappingFromSheet(workbook, sheetName) {
    var result = {};
    var sheet = Excel.loadSheet(workbook, sheetName);
    var source = collect(Excel.getColumn(sheet, "A"));
    var target = collect(Excel.getColumn(sheet, "B"));
    
    Assert.isTrue (Collection.length(source) == Collection.length(target));
    
    foreach (index, element in source) {
        if (index == 0) {
            continue; //skip first line (containing headers)
        }
        result[element] = target[index];
    }
    return result;
}

// inserts headers into sheet on row rowNumber, starting from column A
function insertHeaders(sheet,headers,rowNumber) {
	var rowData = {};
	foreach(header in headers) {
		rowData[header] = header;
	}
	insertRow(sheet,rowData,rowNumber,headers);
}

// inserts rowData object into row rowNumber of sheet.
// mimics MySQL.storeObject() functionality.
// headers should be the same variable as used in insertHeaders,
// rowData must have the headers as keys
function insertRow(sheet,rowData,rowNumber,headers) {
	insertRowWithFormulas(sheet,rowData,rowNumber,headers,[]);
}

// Same as insertRow, but insert the content as formulas if 
// column name (=header) is included in list formulaHeaders
function insertRowWithFormulas(sheet,rowData,rowNumber,headers,formulaHeaders) {
	var rowDataTemp = Collection.duplicate(rowData);
	var columnNumber=1;
	foreach(header in headers) {
		if(Collection.contains(formulaHeaders,header)) {
			do {
			Excel.setCellFormula(sheet, columnNumber, rowNumber, rowDataTemp[header]);
			} fail {
				Excel.setCellValue(sheet, columnNumber, rowNumber, rowDataTemp[header]);
			}
		} else {
			Excel.setCellValue(sheet, columnNumber, rowNumber, rowDataTemp[header]);
		}
		Collection.remove(rowDataTemp, header);
		columnNumber++;
	}
	if(Collection.length(rowDataTemp)>0) {
		System.print("The row data does not comply with the headers specification. rowData: \r\n"
			:: rowDataTemp :: "\r\nHeaders: " :: headers, "warning");
	}
}


