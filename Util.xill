/**
 * Project: demo_drupal_aem
 * Author: Titus Nachbauer
 * Date: 2016-06-23
 *
 * Util.xill is a library of often used functions in projects
 * It is recommended to include it through your project's Commons library.
 */

use System, Stream, File, String, Date, Hash, Properties, Mongo;

//-------------------------------------------------------------------------
//						  FUNCTIONS
//-------------------------------------------------------------------------

/**
* Saves file with content at path
*/
function saveFile(path, content) {
    do {
        var file = File.openWrite(path);
        Stream.write(content, file);
    } fail (error) {
        System.print ("Error saving file at " :: path :: ": " :: error, "error");
    } success {
        System.print ("Saved file at " :: path :: ".");
    }
}

/**
* Returs the path with all backslashes replaced by slashes
*/
function normalizeSlashes(path) {
    return String.replace(path, "\\\\", "/");
}

// Get the extension from a file path
function pathToExtension(path) {
     var ext = String.replace(path, "(.*)([/\\\\])(.*\\.)([\\-0-9a-zA-Z]+)$", "$4");
     // required because Xill returns the entire string if no match is found!
     if (String.length(ext) == String.length(path)) {
          ext = "__XILLIO_NO_FILE_EXTENSION_FOUND__";
     }
     return (ext);
}

/**
* Returns a date object based on dateString, assuming it contains a standart Unix timestamp
*/
function parseTimestamp(dateString) {
    var unixEpoch = Date.parse("1970-01-01T00:00:00Z", "yyyy-MM-dd'T'HH:mm:ssX");
    var result = Date.change(unixEpoch, {"seconds" : dateString});
    return result;
}

/**
* Extract the last element of a path 
*/ 
function pathToName(path) {
     return String.replace(normalizeSlashes(path), "(.*[/\\\\])(.*)", "$2");
}

/**
* Extract the parent path of an uri 
*/
function pathToParent(path) {
     return String.replace(normalizeSlashes(path), "(.*[/\\\\])(.*)", "$1");
}

/**
* Returns true if filename ends in .xill
*/
function isXillFile(filename) {
     return String.matches(String.toLower(filename), ".*\\.xill");
}

/**
* Returns the string converted to to UpperCamelCase, assuming it was lowerCamelCase
*/
function toUpperCamelCase(string) {
    return String.toUpper(String.substring(string, 0, 1)) :: String.substring(string, 1, String.length(string)) ;
}

/**
* Returns the connection to the default UDM database
*/
function getUDMConnection(database){
    do {
        return Mongo.connect (database);
    } fail (error) {
        System.print("Error connecting to UDM database: " :: database :: ", error: ", "error");
    }
}

/**
* Clears the documents collection in the Mongo database
*/
function clearUDMDocuments(database) {
    do {
        Mongo.drop("documents", database);
    } fail (error) {
        System.print("Error clearing UDM documents: " :: database :: ", error: ", "error");
    }
}

/**
* Generates an md5 checksum based on the strings in list
*/
function generateChecksumFromList (list) {
    var text = "";
    foreach (element in list) {
        text = text + element;
    }
    return Hash.toMD5(text);
}